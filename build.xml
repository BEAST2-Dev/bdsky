<!-- Build BDSSM. It is also used by Hudson BDSSM project. JUnit test is available for this build. -->
<project basedir="." default="build_jar_all_BDSSM" name="BUILD_BDSSM">
	<description>
	    Build BDSSM. 
            Also used by Hudson BDSSM project. 
	    JUnit test is available for this build.
	    $Id: build_BDSSM.xml $
	</description>

	<!-- set global properties for this build -->
	<property name="srcBDSSM" location="../bdsky/src" />
	<property name="buildBDSSM" location="../bdsky/build" />
	<property name="libBDSSM" location="../bdsky/lib" />
	<property name="release_dir" value="release" />
	<property name="distBDSSM" location="${buildBDSSM}/dist" />
	<property name="beast2path" location="../beast2" />
	<property name="libBeast2" location="${beast2path}/lib" />
	<property name="srcBeast2" location="${beast2path}/src" />
	<property name="beast2classpath" location="${beast2path}/build" />
    <property name="beastlabsclasspath" location="../BEASTLabs/build" />
    <!--property name="beastclassicclasspath" location="../beast-classic/build" /-->
	<property name="Add_on_dir" value="${release_dir}/add-on" />

    <import file="${beast2path}/build.xml" />

	<property name="main_class_BEAST" value="beast.app.BeastMCMC" />
	<property name="report" value="${buildBDSSM}/junitreport"/>

	<path id="classpath">
        <pathelement path="${buildBDSSM}"/>
		<fileset dir="${libBeast2}" includes="junit-4.8.2.jar"/>
		<fileset dir="${libBeast2}" includes="fest.jar"/>
		<fileset dir="${libBeast2}" includes="jam.jar"/>
		<fileset dir="${libBeast2}" includes="colt.jar"/>
		<fileset dir="${libBeast2}" includes="beagle.jar"/>
		<fileset dir="${libBeast2}" includes="antlr-runtime-4.7.jar"/>
		<fileset dir="${libBDSSM}" includes="jchart2d-3.2.2.jar"/>
        <pathelement path="${beast2classpath}"/>
        <pathelement path="${beastlabsclasspath}"/>
        <!--pathelement path="${beastclassicclasspath}"/-->
	</path>

	<!-- start -->
	<target name="initBDSSM">
		<echo message="${ant.project.name}: ${ant.file}" />
	</target>

	<target name="cleanBDSSM">
    	<delete dir="${buildBDSSM}" />
	</target>

	<!-- clean previous build, and then compile Java source code, and Juint test -->
	<target name="build_all_BDSSM" depends="cleanBDSSM,compile-allBDSSM,junitBDSSM"
        description="Clean and Build all run-time stuff">
	</target>

	<!-- clean previous build, compile Java source code, and Junit test, and make the beast.jar and beauti.jar -->
	<target name="build_jar_all_BDSSM" depends="cleanBDSSM,compile-allBDSSM,junitBDSSM,dist_all_BDSSM"
        description="Clean and Build all run-time stuff">
	</target>


	<!-- No JUnit Test, clean previous build, compile Java source code, and make the BDSSM.jar and beauti.jar -->
	<target name="build_jar_all_BDSSM_NoJUnitTest" depends="cleanBDSSM,compile-allBDSSM,dist_all_BDSSM"
        description="Clean and Build all run-time stuff">
	</target>

	<!-- compile Java source code -->
	<target name="compile-allBDSSM" depends="initBDSSM,compile-all">


	    <!-- Capture the path as a delimited property using the refid attribute -->
	    <property name="myclasspath" refid="classpath"/>
	    <!-- Emit the property to the ant console -->
	    <echo message="Classpath = ${myclasspath}"/>

		<mkdir dir="${buildBDSSM}" />

		<!-- Compile the java code from ${srcBDSSM} into ${buildBDSSM} /bin -->
		<javac srcdir="${srcBDSSM}" destdir="${buildBDSSM}" classpathref="classpath" 
		       fork="true"
		       memoryinitialsize="256m"
		       memorymaximumsize="256m"
			   includeAntRuntime='false'
			   source="1.8"
		       target="1.8">
			<include name="beast/**/**" />
			<!-- compile JUnit test classes -->
			<include name="test/beast/**" />
			<include name="test/bdsky/**" />
		</javac>
		<echo message="Successfully compiled." />
	</target>

	<!-- make the beast.jar and beauti.jar -->
	<target name="dist_all_BDSSM" depends="compile-allBDSSM" description="create BDSSM jar">
		<!-- Create the distribution directory -->
		<mkdir dir="${distBDSSM}" />

		<!-- Put everything in ${buildBDSSM} into the beast.jar file -->
		<jar jarfile="${distBDSSM}/BDSSM.jar">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Main-Class" value="${main_class_BEAST}" />
			</manifest>
			<fileset dir="${buildBDSSM}">
				<include name="beast/**/*.class" />
			</fileset>
			<fileset dir="${beast2classpath}">
				<include name="beast/**/*.class" />
				<include name="beast/**/*.properties" />
				<include name="beast/**/*.png" />
				<include name="beagle/**/*.class" />
				<include name="org/**/*.class" />
			</fileset>
		</jar>
		<jar jarfile="${distBDSSM}/BDSSM.src.jar">
			<fileset dir="${srcBDSSM}">
				<include name="beast/**/*.java" />
				<include name="beast/**/*.png" />
				<include name="beast/**/*.xsl" />
			</fileset>
        </jar>
		<jar jarfile="${distBDSSM}/BDSSM.addon.jar">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
			</manifest>
			<fileset dir="${buildBDSSM}">
				<include name="beast/**/*.class" />
				<include name="util/**/*.class" />
				<include name="**/*.properties" />
			</fileset>
		</jar>
	</target>

	<!-- run beast.jar -->
	<target name="run_BDSSM">
		<java jar="${distBDSSM}/BDSSM.jar" fork="true" />
	</target>

	
	<!-- JUnit test -->
	<target name="junitBDSSM">
		<mkdir dir="${report}" />
		<junit printsummary="yes"> <!--showoutput='yes'-->
			<classpath>
				<path refid="classpath" />
				<path location="${buildBDSSM}" />
			</classpath>

			<formatter type="xml" />

			<batchtest fork="yes" todir="${report}">
				<fileset dir="${srcBDSSM}">
                    <include name="test/**/*Test.java"/>                                         
				</fileset>
				<fileset dir="${srcBeast2}">
                    <include name="test/beast/integration/**/*Test.java"/>                                         
                    <exclude name="test/beast/integration/**/ResumeTest.java"/>                                         
				</fileset>
			</batchtest>
		</junit>
		<echo message="JUnit test finished." />
	</target>
    
    <target name="junitreport">
		<junitreport todir="${report}">
			<fileset dir="${report}" includes="*.xml"/>
			<report format="frames" todir="${report}"/>
		</junitreport>
		<echo message="JUnit test report finished." />
	</target>


	<target name="addon"
	        depends="build_jar_all_BDSSM_NoJUnitTest"
	        description="release BEAST 2 add-on version of BDSKY">

		<delete dir="${Add_on_dir}" />
		<!-- Create the release directory -->
		<mkdir dir="${Add_on_dir}" />
		<mkdir dir="${Add_on_dir}/lib" />
		<mkdir dir="${Add_on_dir}/examples" />
		<mkdir dir="${Add_on_dir}/templates" />

		<copy todir="${Add_on_dir}">
			<fileset file="version.xml"/>
		</copy>
		<copy todir="${Add_on_dir}/examples">
			<fileset dir="examples" />
		</copy>
		<copy todir="${Add_on_dir}/lib">
			<fileset dir="${distBDSSM}" includes="BDSSM.addon.jar" />
		</copy>
		<copy todir="${Add_on_dir}">
			<fileset dir="${distBDSSM}" includes="BDSSM.src.jar" />
		</copy>
		<copy todir="${Add_on_dir}/templates">
			<fileset file="templates/BDSKY_contemp.xml" />
			<fileset file="templates/BDSKY_multiRho.xml" />
			<fileset file="templates/BDSKY_serial.xml" />
			<fileset file="templates/SABDSKY.xml" />
			<fileset file="templates/SAFBDSKY.xml" />
		</copy>

		<jar jarfile="${distBDSSM}/BDSKY.addon.zip">
			<fileset dir="${Add_on_dir}">
				<include name="**/*" />
			</fileset>
        </jar>
		<echo message="Add-on version release is finished." />
	</target>

	<!--=================================================-->

	<!--the following scripts used for Travis CI-->
	<!-- Source, JUnit test code and jar library locations. -->
	<property name="src" location="src"/>
	<property name="test" location="src"/>
	<property name="lib" location="lib"/>

	<!-- Location to check for local copy of beast2 repository -->
	<property name="beastDir" location="../beast2"/>

	<!-- BEAST 2 currently uses Java 1.8 -->
	<property name="sourceVersion" value="1.8"/>
	<property name="targetVersion" value="1.8"/>

	<!-- BEAST branch and version to build against
         (only different for version tags because of
         a Github peculiarity) -->
	<property name="beast-branch" value="master"/>
	<property name="beast-version" value="master"/>

	<!-- Names of temporary build/test directories -->
	<property name="build" location="build"/>
	<property name="build-lib" location="build-lib"/>
	<property name="build-test" location="build-test"/>
	<property name="test-reports" location="test-reports"/>

	<!-- Prepare for compilation -->
	<target name="init">
		<available file="version.xml" property="versionAvailable"/>
		<fail unless="versionAvailable">
			** Required file version.xml does not exist. **
			If this is a new project, run "ant skeleton" from
			the command line to create the files required for
			your BEAST 2 package.
		</fail>

		<!-- Read package name and version from xml file -->
		<xmlproperty file="version.xml" prefix="fromVersionFile" />
		<property name="projName" value="${fromVersionFile.addon(name)}" />
		<property name="projVersion" value="${fromVersionFile.addon(version)}" />

		<mkdir dir="${build}"/>
		<mkdir dir="${build-lib}"/>
		<mkdir dir="${dist}"/>

		<copy todir="${build-lib}" failonerror="false">
			<fileset dir="${lib}" includes="*.jar"/>
		</copy>
	</target>

	<!-- Get beast -->
	<target name="find-beast" depends="init">
		<available file="${beastDir}" property="localBeastAvailable"/>
	</target>

	<target name="build-remote-beast" depends="find-beast" unless="localBeastAvailable">
		<echo>No local copy of the beast2 source found at ${beastDir}.</echo>
		<echo>Compiling against version ${beast-version} from GitHub.</echo>

		<property name="build-beast" location="build-beast"/>
		<mkdir dir="${build-beast}"/>

		<get src="https://github.com/CompEvol/beast2/archive/${beast-branch}.zip" dest="${build-beast}/beast.zip"/>
		<unzip src="${build-beast}/beast.zip" dest="${build-beast}"/>
		<mkdir dir="${build-beast}/beast2-${beast-version}/build"/>
		<javac target="${targetVersion}" source="${sourceVersion}"
			   srcdir="${build-beast}/beast2-${beast-version}/src"
			   destdir="${build-beast}/beast2-${beast-version}/build" includeantruntime="false">
			<classpath>
				<pathelement path="${classpath}"/>
				<fileset dir="${build-beast}/beast2-${beast-version}/lib" includes="*.jar"/>
			</classpath>
		</javac>
		<jar jarfile="${build-lib}/beast2.jar" basedir="${build-beast}/beast2-${beast-version}/build" />
		<copy todir="${build-lib}">
			<fileset dir="${build-beast}/beast2-${beast-version}/lib" includes="*.jar"/>
		</copy>

		<delete dir="${build-beast}" />

	</target>

	<target name="build-local-beast" depends="find-beast" if="localBeastAvailable">
		<echo>Compiling against beast2 source found at ${beastDir}.</echo>

		<property name="build-beast" location="build-beast"/>
		<mkdir dir="${build-beast}"/>

		<javac target="${targetVersion}" source="${sourceVersion}"
			   srcdir="${beastDir}/src"
			   destdir="${build-beast}" includeantruntime="false">
			<classpath>
				<pathelement path="${classpath}"/>
				<fileset dir="${beastDir}/lib" includes="*.jar"/>
			</classpath>
		</javac>
		<jar jarfile="${build-lib}/beast2.jar" basedir="${build-beast}" />
		<copy todir="${build-lib}">
			<fileset dir="${beastDir}/lib" includes="*.jar"/>
		</copy>

		<delete dir="${build-beast}" />
	</target>

	<target name="build-beast" depends="build-local-beast,build-remote-beast"/>

	<!-- Compile -->
	<target name="compile" depends="build-beast">
		<javac target="${targetVersion}" source="${sourceVersion}" srcdir="${src}" destdir="${build}" includeantruntime="false">
			<classpath>
				<pathelement path="${classpath}"/>
				<fileset dir="${build-lib}" includes="*.jar"/>
			</classpath>
		</javac>
	</target>

	<target name="copy-resources" depends="compile">
		<copy todir="${build}">
			<fileset dir="${src}"
					 includes="**/*.png" />
		</copy>
	</target>

	<!-- Prepare for unit test compilation -->
	<target name="init-test" depends="init">
		<mkdir dir="${build-test}"/>
		<mkdir dir="${test-reports}"/>
	</target>


	<!-- Compile unit tests -->
	<target name="compile-test" depends="init-test,compile,copy-resources">
		<javac target="${targetVersion}" source="${sourceVersion}" srcdir="${test}" destdir="${build-test}" includeantruntime="false">
			<classpath>
				<pathelement path="${classpath}"/>
				<pathelement path="${build}" />
				<fileset dir="${build-lib}" includes="*.jar"/>
			</classpath>
		</javac>
	</target>


	<!-- Run unit tests -->
	<target name="test" depends="compile-test" description="for Travis CI">
		<junit printsummary="yes" failureproperty="testFailed" showoutput="true">
			<classpath>
				<pathelement path="${classpath}"/>
				<pathelement path="${build}" />
				<pathelement path="${build-test}" />
				<fileset dir="${build-lib}" includes="*.jar"/>
			</classpath>
			<batchtest fork="yes" todir="${test-reports}">
				<fileset dir="${test}">
					<include name="**/*Test.java"/>
				</fileset>
				<formatter type="plain"/>
				<!--formatter type="plain" usefile="false"/--> <!-- to screen -->
			</batchtest>
		</junit>

		<fail if="testFailed" status="1" message="Unit test failed."/>
	</target>




</project>
