<beast version='2.0'
       namespace='beast.app.beauti:beast.core:beast.evolution.branchratemodel:beast.evolution.speciation:beast.evolution.tree.coalescent:beast.core.util:beast.evolution.nuc:beast.evolution.operators:beast.evolution.sitemodel:beast.evolution.substitutionmodel:beast.evolution.likelihood:beast.evolution:beast.math.distributions'>

<!-- tree priors -->
<mergewith point='treePriorTemplates'> 

        <subtemplate id='BirthDeathSkylineContemporary' class='beast.evolution.speciation.BirthDeathSkylineModel' mainid='BirthDeathSkyContemporary.t:$(n)'
suppressInputs='beast.evolution.speciation.BirthDeathSkylineModel.intervalTimes,
	beast.evolution.speciation.BirthDeathSkylineModel.birthRate,
	beast.evolution.speciation.BirthDeathSkylineModel.deathRate,
	beast.evolution.speciation.BirthDeathSkylineModel.samplingRate,
	beast.evolution.speciation.BirthDeathSkylineModel.rho,
	beast.evolution.speciation.BirthDeathSkylineModel.contemp,
	beast.evolution.speciation.BirthDeathSkylineModel.S0,
	beast.evolution.speciation.BirthDeathSkylineModel.tree,
	beast.evolution.speciation.BirthDeathSkylineModel.treeIntervals,
	beast.evolution.speciation.BirthDeathSkylineModel.forceRateChange, 
	beast.evolution.speciation.BirthDeathSkylineModel.conditionOnSurvival, 
	beast.math.distributions.MarkovChainDistribution.parameter,
	beast.evolution.speciation.BirthDeathSkylineModel.birthRateTimesRelative,
	beast.evolution.speciation.BirthDeathSkylineModel.deathRateTimesRelative,
	beast.evolution.speciation.BirthDeathSkylineModel.samplingRateTimesRelative,
	beast.evolution.speciation.BirthDeathSkylineModel.reverseTimeArrays,
	beast.evolution.speciation.BirthDeathSkylineModel.originIsRootEdge,
	beast.evolution.speciation.BirthDeathSkylineModel.rhoSamplingTimes,
	beast.evolution.speciation.BirthDeathSkylineModel.deathRateChangeTimes,
	beast.evolution.speciation.BirthDeathSkylineModel.samplingRateChangeTimes,
	beast.evolution.speciation.BirthDeathSkylineModel.birthRateChangeTimes,
	beast.evolution.speciation.BirthDeathSkylineModel.removalProbabilityChangeTimes,
	beast.evolution.speciation.BirthDeathSkylineModel.removalProbability,
	beast.evolution.speciation.BirthDeathSkylineModel.conditionOnRhoSampling'>
<![CDATA[
<!-- Sequential Birth Death Skyline model-->
	<BirthDeathSkylineModel spec="beast.evolution.speciation.BirthDeathSkylineModel" id="BirthDeathSkyContemporary.t:$(n)" tree="@Tree.t:$(n)">
		<parameter name="origin" id="origin.t:$(n)" value ="100" lower="0." upper="Infinity"/>  	
		<parameter name="R0" id="R0.t:$(n)" value="2" lower="0." dimension ="10" upper="Infinity"/>
		<parameter name="becomeUninfectiousRate" id="becomeUninfectiousRate.t:$(n)" value="1." lower="0." upper="Infinity" dimension ="1"/>
		<parameter name="samplingProportion" id="samplingProportion.t:$(n)" value="0."/> 
		<parameter name="rho" id="rho.t:$(n)" value="0.01" lower="0." upper="1."/> 
	</BirthDeathSkylineModel>

	<distribution  id='originPrior.t:$(n)' x="@origin.t:$(n)" spec='beast.math.distributions.Prior'>
		<distr spec='beast.math.distributions.Uniform' lower="0." upper="Infinity"/>	</distribution>
	<distribution id="rhoPrior.t:$(n)" spec="beast.math.distributions.Prior" x="@rho.t:$(n)">
		<distr spec="beast.math.distributions.Beta" alpha="1." beta="1." offset="0."/>
	</distribution>
	<distribution id="becomeUninfectiousRatePrior.t:$(n)" spec="beast.math.distributions.Prior" x="@becomeUninfectiousRate.t:$(n)">
		<distr spec='beast.math.distributions.LogNormalDistributionModel' M="0." S="1." offset="0.0" meanInRealSpace="false"/>
	</distribution>
	<distribution id="RPrior.t:$(n)" spec="beast.math.distributions.Prior" x="@R0.t:$(n)">
		<distr spec='beast.math.distributions.LogNormalDistributionModel' M="0." S="1." offset="0.0" meanInRealSpace="false"/>
	</distribution>

	<RPNcalculator spec="beast.math.statistic.RPNcalculator" id="birth.t:$(n)" expression="R0.t:$(n) becomeUninfectiousRate.t:$(n) *"> <!-- s/(d+s) -->
		<parameter idref="becomeUninfectiousRate.t:$(n)"/>
		<parameter idref="R0.t:$(n)"/>        
	</RPNcalculator>
	<RPNcalculator spec="beast.math.statistic.RPNcalculator" id="sampling.t:$(n)" expression="becomeUninfectiousRate.t:$(n) samplingProportion.t:$(n) *"> 
		<parameter idref="becomeUninfectiousRate.t:$(n)"/>
		<parameter idref="samplingProportion.t:$(n)"/>        
	</RPNcalculator>
	<RPNcalculator spec="beast.math.statistic.RPNcalculator" id="death.t:$(n)" expression="becomeUninfectiousRate.t:$(n) 1 samplingProportion.t:$(n) - *"> <!-- b*S0/(d+s) -->
		<parameter idref="becomeUninfectiousRate.t:$(n)"/>
		<parameter idref="samplingProportion.t:$(n)"/>        
	</RPNcalculator>

	<!-- tree operators -->	
	<operator id='BDSKY_contemptreeScaler.t:$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="3" tree="@Tree.t:$(n)"/>
	<operator id='BDSKY_contemptreeRootScaler.t:$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="3" tree="@Tree.t:$(n)" rootOnly='true'/>
	<operator id='BDSKY_contempUniformOperator.t:$(n)' spec='Uniform' weight="30" tree="@Tree.t:$(n)"/>
	<operator id='BDSKY_contempSubtreeSlide.t:$(n)' spec='SubtreeSlide' weight="15" gaussian="true" size="1.0" tree="@Tree.t:$(n)"/>
	<operator id='BDSKY_contempnarrow.t:$(n)' spec='Exchange' isNarrow='true' weight="15" tree="@Tree.t:$(n)"/>
	<operator id='BDSKY_contempwide.t:$(n)' spec='Exchange' isNarrow='false' weight="3" tree="@Tree.t:$(n)"/>
	<operator id='BDSKY_contempWilsonBalding.t:$(n)' spec='WilsonBalding' weight="3" tree="@Tree.t:$(n)"/>

	<!-- BDSKY operators -->
	<operator id='becomeUninfectiousRateScaler.t:$(n)' spec='ScaleOperator' scaleFactor=".75" weight="2" parameter="@becomeUninfectiousRate.t:$(n)"/>
	<operator id='rhoScaler.t:$(n)' spec='ScaleOperator' scaleFactor=".75" weight="1" parameter="@rho.t:$(n)"/>
	<operator id='RScaler.t:$(n)' spec='ScaleOperator' scaleFactor=".75" weight="10" parameter="@R0.t:$(n)"/>

	<operator id="updownBD.t:$(n)" spec="UpDownOperator" scaleFactor=".75" weight="2">
		<up idref="R0.t:$(n)"/>
		<down idref="becomeUninfectiousRate.t:$(n)"/>
	</operator>

	<operator id='origScaler.t:$(n)' spec='ScaleOperator' scaleFactor=".75" weight="1" parameter="@origin.t:$(n)"/>
]]>
            <connect srcID='BirthDeathSkyContemporary.t:$(n)' targetID='prior' inputName='distribution' if='inposterior(BirthDeathSkyContemporary.t:$(n)) and inlikelihood(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='RandomTree.t:$(n)'                targetID='BirthDeathSkySerial.t:$(n)' inputName='init'   if='inposterior(Tree.t:$(n))'/>

            <connect srcID='originPrior.t:$(n)' targetID='prior' inputName='distribution' if='inposterior(BirthDeathSkyContemporary.t:$(n)) and origin.t:$(n)/estimate=true'>prior on origin.t:$(n)</connect>
            <connect srcID='rhoPrior.t:$(n)' targetID='prior' inputName='distribution' if='inposterior(BirthDeathSkyContemporary.t:$(n)) and rho.t:$(n)/estimate=true'>prior on sampling proportion t:$(n)</connect>
            <connect srcID='becomeUninfectiousRatePrior.t:$(n)' targetID='prior' inputName='distribution' if='inposterior(BirthDeathSkyContemporary.t:$(n)) and becomeUninfectiousRate.t:$(n)/estimate=true'>prior on becomeUninfectiousRate.t:$(n)</connect>
            <connect srcID='RPrior.t:$(n)' targetID='prior' inputName='distribution' if='inposterior(BirthDeathSkyContemporary.t:$(n)) and R0.t:$(n)/estimate=true'>prior on R0.t:$(n)</connect>

            <connect srcID='BDSKY_contemptreeScaler.t:$(n)'                targetID='mcmc' inputName='operator' if='inposterior(BirthDeathSkyContemporary.t:$(n)) and inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'>Scales all internal nodes for tree t:$(n)</connect>
            <connect srcID='BDSKY_contemptreeRootScaler.t:$(n)'            targetID='mcmc' inputName='operator' if='inposterior(BirthDeathSkyContemporary.t:$(n)) and inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'>Scales root node for tree t:$(n)</connect>
            <connect srcID='BDSKY_contempUniformOperator.t:$(n)'           targetID='mcmc' inputName='operator' if='inposterior(BirthDeathSkyContemporary.t:$(n)) and inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'>Draws new internal node heights uniformally for tree t:$(n)</connect>
            <connect srcID='BDSKY_contempSubtreeSlide.t:$(n)'              targetID='mcmc' inputName='operator' if='inposterior(BirthDeathSkyContemporary.t:$(n)) and inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'>Performs subtree slide rearrangement of tree t:$(n)</connect>
            <connect srcID='BDSKY_contempnarrow.t:$(n)'                    targetID='mcmc' inputName='operator' if='inposterior(BirthDeathSkyContemporary.t:$(n)) and inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'>Narrow exchange performs local rearrangement of tree t:$(n)</connect>
            <connect srcID='BDSKY_contempwide.t:$(n)'                      targetID='mcmc' inputName='operator' if='inposterior(BirthDeathSkyContemporary.t:$(n)) and inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'>Wide exchange performs global rearrangement of tree t:$(n)</connect>
            <connect srcID='BDSKY_contempWilsonBalding.t:$(n)'             targetID='mcmc' inputName='operator' if='inposterior(BirthDeathSkyContemporary.t:$(n)) and inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'>Performs Wilson-Balding global rearrangement of tree t:$(n)</connect>

            <connect srcID='becomeUninfectiousRateScaler.t:$(n)' targetID='mcmc' inputName='operator'     if='inposterior(BirthDeathSkyContemporary.t:$(n)) and becomeUninfectiousRate.t:$(n)/estimate=true'/>
            <connect srcID='rhoScaler.t:$(n)' targetID='mcmc' inputName='operator'     if='inposterior(BirthDeathSkyContemporary.t:$(n)) and rho.t:$(n)/estimate=true'/>
            <connect srcID='RScaler.t:$(n)' targetID='mcmc' inputName='operator'     if='inposterior(BirthDeathSkyContemporary.t:$(n)) and R0.t:$(n)/estimate=true'/>
            <connect srcID='updownBD.t:$(n)' targetID='mcmc' inputName='operator'     if='inposterior(BirthDeathSkyContemporary.t:$(n)) and R0.t:$(n)/estimate=true and becomeUninfectiousRate.t:$(n)/estimate=true'/>
            <connect srcID='origScaler.t:$(n)' targetID='mcmc' inputName='operator'     if='inposterior(BirthDeathSkyContemporary.t:$(n)) and origin.t:$(n)/estimate=true'/>



            <connect srcID='BirthDeathSkyContemporary.t:$(n)' targetID='tracelog' inputName='log' if='inposterior(BirthDeathSkyContemporary.t:$(n))'/>
            <plate var='p' range='origin,rho,becomeUninfectiousRate,R0'>
                    <connect srcID='$(p).t:$(n)' targetID='state' inputName='stateNode' if='inposterior(BirthDeathSkyContemporary.t:$(n)) and $(p).t:$(n)/estimate=true'/>
                    <connect srcID='$(p).t:$(n)' targetID='tracelog' inputName='log' if='inposterior(BirthDeathSkyContemporary.t:$(n)) and $(p).t:$(n)/estimate=true'/>
            </plate>
            <plate var='p' range='birth,death,sampling'>
	            <connect srcID='$(p).t:$(n)' targetID='tracelog' inputName='log' if='inposterior(BirthDeathSkyContemporary.t:$(n))'/>
			</plate>
	</subtemplate>
</mergewith>

</beast>



