<beast version='2.0'
       namespace='beast.app.beauti:beast.core:beast.evolution.branchratemodel:beast.evolution.speciation:beast.evolution.tree.coalescent:beast.core.util:beast.evolution.nuc:beast.evolution.operators:beast.evolution.sitemodel:beast.evolution.substitutionmodel:beast.evolution.likelihood:beast.evolution:beast.math.distributions'>

    <!-- tree priors -->
    <mergewith point='treePriorTemplates'>

        <subtemplate id='SampledAncestorFossilizedBirthDeathSkylineModel' class='beast.evolution.speciation.BirthDeathSkylineModel' mainid='SAFBDSkyline.t:$(n)'
                     suppressInputs='beast.evolution.speciation.BirthDeathSkylineModel.intervalTimes,
	beast.evolution.speciation.BirthDeathSkylineModel.contemp,
	beast.evolution.speciation.BirthDeathSkylineModel.S0,
	beast.evolution.speciation.BirthDeathSkylineModel.tree,
	beast.evolution.speciation.BirthDeathSkylineModel.treeIntervals,
	beast.evolution.speciation.BirthDeathSkylineModel.forceRateChange,
	beast.math.distributions.MarkovChainDistribution.parameter,
	beast.evolution.speciation.BirthDeathSkylineModel.reverseTimeArrays,
	beast.evolution.speciation.BirthDeathSkylineModel.deathRateTimesRelative,
	beast.evolution.speciation.BirthDeathSkylineModel.samplingRateTimesRelative,
	beast.evolution.speciation.BirthDeathSkylineModel.birthRateTimesRelative,
	beast.evolution.speciation.BirthDeathSkylineModel.removalProbabilityTimesRelative,
	beast.evolution.speciation.BirthDeathSkylineModel.originIsRootEdge,
	beast.evolution.speciation.BirthDeathSkylineModel.R0,
	beast.evolution.speciation.BirthDeathSkylineModel.becomeUninfectiousRate,
	beast.evolution.speciation.BirthDeathSkylineModel.samplingProportion,
	beast.evolution.speciation.BirthDeathSkylineModel.removalProbabilityChangeTimes,
	beast.evolution.speciation.BirthDeathSkylineModel.removalProbability,
	beast.evolution.speciation.BirthDeathSkylineModel.conditionOnSurvival'>

            <![CDATA[
    <!-- Sampled Ancestor Birth Death Skyline model-->
    <BirthDeathSkylineModel spec="beast.evolution.speciation.BirthDeathSkylineModel" id="SAFBDSkyline.t:$(n)" tree="@Tree.t:$(n)" conditionOnRhoSampling="true" conditionOnSurvival="false">
		<parameter name="origin" id="originF.t:$(n)" value ="100.0" lower="0."/>
        <parameter name="birthRate" id="birthRateF.t:$(n)" value ="1.5 1.5 1.5" lower="0."/>
        <parameter name="deathRate" id="deathRateF.t:$(n)" value ="0.2 0.2 0.2" lower="0."/>
        <parameter name="samplingRate" id="samplingRateF.t:$(n)" value="0.5 0.5 0.5" lower="0." upper="10"/>
        <parameter name="rho" id="rhoF.t:$(n)" value="0.0 0.5" lower="0." upper="1."/>
        <parameter name="removalProbability" id="rF.t:$(n)" value="0.0" lower="0." upper="1."/>
        <parameter name="birthRateChangeTimes" id="birthRateChangeTimesF.t:$(n)" value="2. 1. 0."/>
        <parameter name="deathRateChangeTimes" id="deathRateChangeTimesF.t:$(n)" value="2. 1. 0."/>
        <parameter name="samplingRateChangeTimes" id="samplingRateChangeTimesF.t:$(n)" value="1. 2. 0."/>
        <parameter name="rhoSamplingTimes" id="rhoSamplingTimesF.t:$(n)" value="1. 0."/>
        <reverseTimeArrays spec='parameter.BooleanParameter' value='true true true true true'/>
	</BirthDeathSkylineModel>


	<distribution  id='originPriorF.t:$(n)' x="@originF.t:$(n)" spec='beast.math.distributions.Prior'>
		<distr spec='beast.math.distributions.Uniform' lower="0." upper="Infinity"/>
	</distribution>
	<distribution id="birthRatePriorF.t:$(n)" spec="beast.math.distributions.Prior" x="@birthRateF.t:$(n)">
        <distr spec='beast.math.distributions.Uniform' lower="0." upper="Infinity"/>	</distribution>
	<distribution id="deathRatePriorF.t:$(n)" spec="beast.math.distributions.Prior" x="@deathRateF.t:$(n)">
		<distr spec='beast.math.distributions.Uniform' lower="0." upper="Infinity"/>
	</distribution>
	<distribution id="samplingRatePriorF.t:$(n)" spec="beast.math.distributions.Prior" x="@samplingRateF.t:$(n)">
		<distr spec='beast.math.distributions.Uniform' lower="0." upper="Infinity"/>
	</distribution>
	<distribution id="rhoPriorF.t:$(n)" spec="beast.math.distributions.Prior" x="@rhoF.t:$(n)">
        <distr spec='beast.math.distributions.Uniform' lower="0." upper="1."/>
	</distribution>

	<operator id='originScalerF.t:$(n)' spec='ScaleOperator' scaleFactor=".75" weight="3" parameter="@originF.t:$(n)"/>
    <operator id='birthScalerF.t:$(n)' spec='ScaleOperator' scaleFactor=".75" weight="10" parameter="@birthRateF.t:$(n)"/>
    <operator id='deathScalerF.t:$(n)' spec='ScaleOperator' scaleFactor=".75" weight="10" parameter="@deathRateF.t:$(n)"/>
	<operator id='samplingScalerF.t:$(n)' spec='ScaleOperator' scaleFactor=".75" weight="10" parameter="@samplingRateF.t:$(n)"/>
    <operator id='rhoScalerF.t:$(n)' spec='ScaleOperator' scaleFactor=".9" weight="1" parameter="@rhoF.t:$(n)"/>

    <plugin id='SACountF.t:$(n)' spec='beast.evolution.tree.SampledAncestorLogger' tree='@Tree.t:$(n)'/>

    <!-- operators for sampled ancestor trees -->
    <operator id='LeafToSAF.t:$(n)' spec='beast.evolution.operators.LeafToSampledAncestorJump' weight="10" tree="@Tree.t:$(n)"/>
    <operator id='SAWilsonBaldingF.t:$(n)' spec='beast.evolution.operators.SAWilsonBalding' weight="10" tree="@Tree.t:$(n)"/>
    <operator id='SAWideF.t:$(n)' spec='beast.evolution.operators.SAExchange' isNarrow="false" weight="10" tree="@Tree.t:$(n)"/>
    <operator id='SANarrowF.t:$(n)' spec='beast.evolution.operators.SAExchange' weight="10" tree="@Tree.t:$(n)"/>
    <operator id='SAUniformOperatorF.t:$(n)' spec='beast.evolution.operators.SAUniform' weight="20" tree="@Tree.t:$(n)"/>
    <operator id='SATreeRootScalerF.t:$(n)' spec='beast.evolution.operators.SAScaleOperator' scaleFactor=".95" weight="1" tree="@Tree.t:$(n)" rootOnly='true'/>
    <operator id='SATreeScalerF.t:$(n)' spec='beast.evolution.operators.SAScaleOperator' scaleFactor=".95" weight="3" tree="@Tree.t:$(n)"/>

]]>
            <connect srcID='SAFBDSkyline.t:$(n)' targetID='prior' inputName='distribution' if='inposterior(SAFBDSkyline.t:$(n)) and inlikelihood(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>

            <connect srcID='originPriorF.t:$(n)' targetID='prior' inputName='distribution' if='inposterior(SAFBDSkyline.t:$(n)) and originF.t:$(n)/estimate=true'>prior on origin.t:$(n)</connect>
            <connect srcID='birthRatePriorF.t:$(n)' targetID='prior' inputName='distribution' if='inposterior(SAFBDSkyline.t:$(n)) and birthRateF.t:$(n)/estimate=true'>prior on birthRateF.t:$(n)</connect>
            <connect srcID='deathRatePriorF.t:$(n)' targetID='prior' inputName='distribution' if='inposterior(SAFBDSkyline.t:$(n)) and deathRateF.t:$(n)/estimate=true'>prior on deathRateF.t:$(n)</connect>
            <connect srcID='samplingRatePriorF.t:$(n)' targetID='prior' inputName='distribution' if='inposterior(SAFBDSkyline.t:$(n)) and samplingRateF.t:$(n)/estimate=true'>prior on samplingRateF.t:$(n)</connect>
            <connect srcID='rhoPriorF.t:$(n)' targetID='prior' inputName='distribution' if='inposterior(SAFBDSkyline.t:$(n)) and rhoF.t:$(n)/estimate=true'>prior on rhoF.t:$(n)</connect>

            <connect srcID='originScalerF.t:$(n)' targetID='mcmc' inputName='operator'     if='inposterior(SAFBDSkyline.t:$(n)) and originF.t:$(n)/estimate=true'/>
            <connect srcID='birthScalerF.t:$(n)' targetID='mcmc' inputName='operator'     if='inposterior(SAFBDSkyline.t:$(n)) and birthRateF.t:$(n)/estimate=true'/>
            <connect srcID='deathScalerF.t:$(n)' targetID='mcmc' inputName='operator'     if='inposterior(SAFBDSkyline.t:$(n)) and deathRateF.t:$(n)/estimate=true'/>
            <connect srcID='samplingScalerF.t:$(n)' targetID='mcmc' inputName='operator'     if='inposterior(SAFBDSkyline.t:$(n)) and samplingRateF.t:$(n)/estimate=true'/>
            <connect srcID='rhoScalerF.t:$(n)' targetID='mcmc' inputName='operator'     if='inposterior(SAFBDSkyline.t:$(n)) and rhoF.t:$(n)/estimate=true'/>

            <connect srcID='LeafToSAF.t:$(n)' targetID='mcmc' inputName='operator' if='inposterior(SAFBDSkyline.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='SAWilsonBaldingF.t:$(n)' targetID='mcmc' inputName='operator' if='inposterior(SAFBDSkyline.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='SAWideF.t:$(n)' targetID='mcmc' inputName='operator' if='inposterior(SAFBDSkyline.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='SANarrowF.t:$(n)' targetID='mcmc' inputName='operator' if='inposterior(SAFBDSkyline.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='SAUniformOperatorF.t:$(n)' targetID='mcmc' inputName='operator' if='inposterior(SAFBDSkyline.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='SATreeRootScalerF.t:$(n)' targetID='mcmc' inputName='operator' if='inposterior(SAFBDSkyline.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='SATreeScalerF.t:$(n)' targetID='mcmc' inputName='operator' if='inposterior(SAFBDSkyline.t:$(n)) and Tree.t:$(n)/estimate=true'/>

            <connect srcID='SAFBDSkyline.t:$(n)' targetID='tracelog' inputName='log' if='inposterior(SAFBDSkyline.t:$(n))'/>
            <plate var='p' range='origin,birthRate,deathRate,samplingRate,rho'>
                <connect srcID='$(p)F.t:$(n)' targetID='state' inputName='stateNode' if='inposterior(SAFBDSkyline.t:$(n)) and $(p)F.t:$(n)/estimate=true'/>
                <connect srcID='$(p)F.t:$(n)' targetID='tracelog' inputName='log' if='inposterior(SAFBDSkyline.t:$(n)) and $(p)F.t:$(n)/estimate=true'/>
            </plate>
            <connect srcID='SAFBDSkyline.t:$(n)' targetID='tracelog' inputName='log' if='inposterior(SAFBDSkyline.t:$(n))'/>

            <connect srcID='SACountF.t:$(n)' targetID='tracelog' inputName='log' if='inposterior(SAFBDSkyline.t:$(n)) and inposterior(Tree.t:$(n))'/>
        </subtemplate>
    </mergewith>

</beast>